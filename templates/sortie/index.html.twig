{% extends 'base.html.twig' %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('styles/sortie.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .view-toggle {
            display: flex;
            justify-content: center;
            margin-bottom: 2rem;
        }
        .toggle-btn {
            background: var(--light-grey);
            border: none;
            padding: 0.5rem 1rem;
            margin: 0 0.5rem;
            border-radius: 20px;
            cursor: pointer;
            transition: var(--transition);
        }
        .toggle-btn.active {
            background: var(--primary);
            color: white;
        }
        .toggle-btn:hover:not(.active) {
            background: #e0e0e0;
        }
        .view-container {
            display: none;
        }
        .view-container.active {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        /* Styles pour le calendrier personnalisé */
        .simple-calendar {
            background: white;
            border-radius: 12px;
            box-shadow: var(--shadow);
            padding: 20px;
            margin-bottom: 20px;
        }
        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .calendar-title {
            font-size: 1.5rem;
            font-weight: bold;
        }
        .calendar-nav {
            display: flex;
            gap: 10px;
        }
        .calendar-nav button {
            background: var(--light-grey);
            border: none;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
        }
        .calendar-nav button:hover {
            background: #e0e0e0;
        }
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }
        .calendar-day-name {
            text-align: center;
            font-weight: bold;
            padding: 10px;
            background: var(--light-grey);
            border-radius: 5px;
        }
        .calendar-day {
            position: relative;
            min-height: 80px;
            height: 100px; /* Fixed height for consistent sizing */
            padding: 5px;
            border: 1px solid #eee;
            border-radius: 5px;
            background: #f9f9f9;
            overflow: hidden; /* Prevent content from breaking layout */
        }
        .calendar-day.other-month {
            opacity: 0.5;
        }
        .calendar-day.today {
            background: #e6f7ff;
            border-color: #91d5ff;
        }
        .day-number {
            position: absolute;
            top: 5px;
            right: 5px;
            width: 24px;
            height: 24px;
            text-align: center;
            line-height: 24px;
            font-weight: bold;
            font-size: 0.8rem;
        }
        .today .day-number {
            background: var(--primary);
            color: white;
            border-radius: 50%;
        }
        .calendar-events {
            margin-top: 25px;
            font-size: 0.8rem;
            max-height: 60px; /* Limit height to prevent overflow */
            overflow: hidden;
        }
        .calendar-event {
            margin-bottom: 3px;
            padding: 3px 5px;
            border-radius: 3px;
            background: var(--primary);
            color: white;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 100%; /* Ensure text truncation works */
            cursor: pointer;
            transition: var(--transition);
        }
        .calendar-event:hover {
            filter: brightness(1.1);
        }
        .calendar-view-all {
            font-size: 0.7rem;
            color: var(--primary);
            cursor: pointer;
            text-align: center;
            margin-top: 2px;
        }

        /* Style pour la liste des événements du jour */
        .events-list {
            margin-top: 30px;
            background: white;
            border-radius: 12px;
            box-shadow: var(--shadow);
            padding: 20px;
        }
        .events-list h2 {
            margin-top: 0;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }
        .event-card {
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            transition: var(--transition);
        }
        .event-card:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .event-title {
            font-weight: bold;
            margin-bottom: 8px;
        }
        .event-info {
            font-size: 0.9rem;
            color: #666;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        .event-info div {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .event-actions {
            margin-top: 10px;
            display: flex;
            gap: 10px;
        }
        .empty-events {
            text-align: center;
            padding: 20px;
            color: #999;
        }
    </style>
{% endblock %}

{% block title %}Liste des Sorties{% endblock %}

{% block body %}
<div class="example-wrapper">
    <h1><i class="fas fa-calendar-alt"></i> Liste des Sorties</h1>

    <div class="actions-bar">
        <a href="{{ path('app_sortie_creation') }}" class="nav-link">
            <i class="fas fa-plus-circle"></i> Créer une sortie
        </a>

        <div class="view-toggle">
            <button class="toggle-btn active" data-view="table">
                <i class="fas fa-table"></i> Tableau
            </button>
            <button class="toggle-btn" data-view="calendar">
                <i class="fas fa-calendar-alt"></i> Calendrier
            </button>
        </div>
    </div>

    {# Table View #}
    <div id="table-view" class="view-container active">
        {% if sorties|length > 0 %}
            <table>
                <thead>
                    <tr>
                        <th><i class="fas fa-tag"></i> Nom</th>
                        <th><i class="fas fa-clock"></i> Date de début</th>
                        <th><i class="fas fa-hourglass-half"></i> Durée</th>
                        <th><i class="fas fa-map-marker-alt"></i> Lieu</th>
                        <th><i class="fas fa-user"></i> Organisateur</th>
                        <th><i class="fas fa-users"></i> Participants</th>
                        <th><i class="fas fa-cog"></i> Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for sortie in sorties %}
                        <tr>
                            <td data-label="Nom">{{ sortie.nom }}</td>
                            <td data-label="Date de début">{{ sortie.dateHeureDebut|date('d/m/Y H:i') }}</td>
                            <td data-label="Durée">{{ sortie.duree }} min</td>
                            <td data-label="Lieu">{{ sortie.lieu.nom }}</td>
                            <td data-label="Organisateur">{{ sortie.organisateur.nom }}</td>
                            <td data-label="Participants">
                                <span class="badge {% if sortie.participants|length >= sortie.nbInscriptionsMax %}badge-full{% endif %}">
                                    {{ sortie.participants|length }} / {{ sortie.nbInscriptionsMax }}
                                </span>
                            </td>
                            <td data-label="Actions">
                                <a href="{{ path('app_sortie_details', {'id': sortie.id}) }}" class="btn-action">
                                    <i class="fas fa-eye"></i>
                                </a>
                                {% if app.user == sortie.organisateur %}
                                    <a href="{{ path('app_sortie_edit', {'id': sortie.id}) }}" class="btn-action">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                {% endif %}
                                {% if sortie.participants|length < sortie.nbInscriptionsMax and sortie.dateLimiteInscription > date() %}
                                    <a href="{{ path('app_sortie_participer', {'id': sortie.id}) }}" class="btn-action">
                                        <i class="fas fa-user-plus"></i>
                                    </a>
                                {% endif %}
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% else %}
            <div class="empty-state">
                <i class="fas fa-calendar-times fa-3x"></i>
                <p>Aucune sortie disponible.</p>
                <a href="{{ path('app_sortie_creation') }}" class="nav-link">
                    <i class="fas fa-plus-circle"></i> Créer la première sortie
                </a>
            </div>
        {% endif %}
    </div>

    {# Calendar View #}
    <div id="calendar-view" class="view-container">
        <div class="simple-calendar">
            <div class="calendar-header">
                <div class="calendar-nav">
                    <button id="prev-month"><i class="fas fa-chevron-left"></i></button>
                </div>
                <div class="calendar-title" id="calendar-month">Février 2025</div>
                <div class="calendar-nav">
                    <button id="next-month"><i class="fas fa-chevron-right"></i></button>
                </div>
            </div>
            <div class="calendar-grid" id="calendar-days-header">
                <div class="calendar-day-name">Lun</div>
                <div class="calendar-day-name">Mar</div>
                <div class="calendar-day-name">Mer</div>
                <div class="calendar-day-name">Jeu</div>
                <div class="calendar-day-name">Ven</div>
                <div class="calendar-day-name">Sam</div>
                <div class="calendar-day-name">Dim</div>
            </div>
            <div class="calendar-grid" id="calendar-days">
                <!-- Jours du calendrier générés par JavaScript -->
            </div>
        </div>
        
        <div class="events-list" id="day-events">
            <h2 id="selected-date">Événements du jour</h2>
            <div id="events-container">
                <!-- Les événements du jour sélectionné seront affichés ici -->
                <div class="empty-events">
                    <i class="fas fa-calendar-day fa-3x"></i>
                    <p>Sélectionnez un jour pour voir les événements</p>
                </div>
            </div>
        </div>
    </div>
</div>

{# Données des sorties en JSON pour le JavaScript #}
<script type="application/json" id="events-data">
[
    {% for sortie in sorties %}
    {
        "id": {{ sortie.id }},
        "title": {{ sortie.nom|json_encode|raw }},
        "start": "{{ sortie.dateHeureDebut|date('Y-m-d\\TH:i:s') }}",
        "end": "{{ sortie.dateHeureDebut|date_modify('+' ~ sortie.duree ~ ' minutes')|date('Y-m-d\\TH:i:s') }}",
        "lieu": {{ sortie.lieu.nom|json_encode|raw }},
        "organisateur": {{ sortie.organisateur.nom|json_encode|raw }},
        "participants": "{{ sortie.participants|length }} / {{ sortie.nbInscriptionsMax }}",
        "detailsUrl": "{{ path('app_sortie_details', {'id': sortie.id}) }}"
        {% if app.user == sortie.organisateur %}
        ,"editUrl": "{{ path('app_sortie_edit', {'id': sortie.id}) }}"
        {% endif %}
        {% if sortie.participants|length < sortie.nbInscriptionsMax and sortie.dateLimiteInscription > date() %}
        ,"participateUrl": "{{ path('app_sortie_participer', {'id': sortie.id}) }}"
        {% endif %}
    }{% if not loop.last %},{% endif %}
    {% endfor %}
]
</script>
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Variables globales
        let currentDate = new Date();
        let selectedDate = new Date();
        let events = [];
        
        // Éléments DOM
        const toggleBtns = document.querySelectorAll('.toggle-btn');
        const viewContainers = document.querySelectorAll('.view-container');
        const prevMonthBtn = document.getElementById('prev-month');
        const nextMonthBtn = document.getElementById('next-month');
        const calendarMonthTitle = document.getElementById('calendar-month');
        const calendarDaysGrid = document.getElementById('calendar-days');
        const selectedDateTitle = document.getElementById('selected-date');
        const eventsContainer = document.getElementById('events-container');
        
        // Noms des mois en français
        const monthNames = [
            'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',
            'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'
        ];
        
        // Chargement des événements
        try {
            const eventsData = document.getElementById('events-data');
            if (eventsData) {
                events = JSON.parse(eventsData.textContent);
            }
        } catch (e) {
            console.error('Erreur lors du chargement des événements:', e);
            events = [];
        }
        
        // Gestionnaire de bascule entre les vues
        toggleBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                const targetView = this.getAttribute('data-view');
                
                // Mettre à jour les boutons
                toggleBtns.forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                
                // Mettre à jour les vues
                viewContainers.forEach(vc => vc.classList.remove('active'));
                document.getElementById(`${targetView}-view`).classList.add('active');
                
                // Si on passe à la vue calendrier, initialiser le calendrier
                if (targetView === 'calendar') {
                    renderCalendar();
                    updateDayEvents(selectedDate);
                }
            });
        });
        
        // Gestionnaires de navigation dans le calendrier
        prevMonthBtn.addEventListener('click', function() {
            currentDate.setMonth(currentDate.getMonth() - 1);
            renderCalendar();
        });
        
        nextMonthBtn.addEventListener('click', function() {
            currentDate.setMonth(currentDate.getMonth() + 1);
            renderCalendar();
        });
        
        // Fonction pour rendre le calendrier
        function renderCalendar() {
            // Mettre à jour le titre du mois
            calendarMonthTitle.textContent = `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`;
            
            // Vider la grille du calendrier
            calendarDaysGrid.innerHTML = '';
            
            // Créer un nouvel objet Date pour éviter de modifier currentDate
            const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            
            // Trouver le premier jour du mois
            let firstDay = date.getDay();
            firstDay = firstDay === 0 ? 6 : firstDay - 1; // Ajustement pour commencer par lundi (0)
            
            // Reculer jusqu'au lundi précédant le premier jour du mois
            date.setDate(date.getDate() - firstDay);
            
            // Créer 6 semaines (42 jours) pour couvrir tout le mois
            for (let i = 0; i < 42; i++) {
                const dayDate = new Date(date);
                const isCurrentMonth = dayDate.getMonth() === currentDate.getMonth();
                const isToday = isSameDay(dayDate, new Date());
                
                // Créer la cellule du jour
                const dayCell = document.createElement('div');
                dayCell.className = `calendar-day${isCurrentMonth ? '' : ' other-month'}${isToday ? ' today' : ''}`;
                dayCell.dataset.date = formatDate(dayDate);
                
                // Ajouter le numéro du jour
                const dayNumber = document.createElement('div');
                dayNumber.className = 'day-number';
                dayNumber.textContent = dayDate.getDate();
                dayCell.appendChild(dayNumber);
                
                // Ajouter les événements du jour
                const dayEvents = document.createElement('div');
                dayEvents.className = 'calendar-events';
                
                // Filtrer les événements pour cette journée
                const eventsForDay = getEventsForDay(dayDate);
                
                // Ajouter un maximum de 3 événements
                const maxDisplay = 2;
                const displayEvents = eventsForDay.slice(0, maxDisplay);
                
                displayEvents.forEach(event => {
                    const eventElement = document.createElement('div');
                    eventElement.className = 'calendar-event';
                    // Only show the time and a shortened version of the title
                    const shortTitle = event.title.length > 15 ? 
                        event.title.substring(0, 15) + '...' : 
                        event.title;
                    eventElement.textContent = formatTime(new Date(event.start)) + ' ' + shortTitle;
                    eventElement.title = `${event.title} - ${event.lieu} - ${event.organisateur}`; // Full info on hover
                    dayEvents.appendChild(eventElement);
                });
                
                // Indiquer s'il y a plus d'événements
                if (eventsForDay.length > maxDisplay) {
                    const moreEvents = document.createElement('div');
                    moreEvents.className = 'calendar-view-all';
                    moreEvents.textContent = `+${eventsForDay.length - maxDisplay} autres`;
                    dayEvents.appendChild(moreEvents);
                }
                
                dayCell.appendChild(dayEvents);
                
                // Ajouter un gestionnaire d'événement au clic
                dayCell.addEventListener('click', function() {
                    // Mettre à jour la date sélectionnée
                    selectedDate = new Date(this.dataset.date);
                    
                    // Mettre à jour la classe active
                    document.querySelectorAll('.calendar-day').forEach(cell => {
                        cell.classList.remove('selected');
                    });
                    this.classList.add('selected');
                    
                    // Mettre à jour les événements du jour
                    updateDayEvents(selectedDate);
                });
                
                // Ajouter la cellule à la grille
                calendarDaysGrid.appendChild(dayCell);
                
                // Passer au jour suivant
                date.setDate(date.getDate() + 1);
            }
        }
        
        // Fonction pour mettre à jour la liste des événements du jour sélectionné
        function updateDayEvents(date) {
            // Mettre à jour le titre
            selectedDateTitle.textContent = `Événements du ${formatDateFR(date)}`;
            
            // Récupérer les événements du jour
            const dayEvents = getEventsForDay(date);
            
            // Vider le conteneur
            eventsContainer.innerHTML = '';
            
            // Afficher les événements ou un message si aucun
            if (dayEvents.length === 0) {
                const emptyMessage = document.createElement('div');
                emptyMessage.className = 'empty-events';
                emptyMessage.innerHTML = `
                    <i class="fas fa-calendar-day fa-3x"></i>
                    <p>Aucun événement pour cette journée</p>
                `;
                eventsContainer.appendChild(emptyMessage);
            } else {
                dayEvents.forEach(event => {
                    const eventCard = document.createElement('div');
                    eventCard.className = 'event-card';
                    
                    // Formater l'heure de début et de fin
                    const startTime = formatTime(new Date(event.start));
                    const endTime = formatTime(new Date(event.end));
                    
                    // Créer le contenu de la carte
                    eventCard.innerHTML = `
                        <div class="event-title">${event.title}</div>
                        <div class="event-info">
                            <div><i class="fas fa-clock"></i> ${startTime} - ${endTime}</div>
                            <div><i class="fas fa-map-marker-alt"></i> ${event.lieu}</div>
                            <div><i class="fas fa-user"></i> ${event.organisateur}</div>
                            <div><i class="fas fa-users"></i> ${event.participants}</div>
                        </div>
                        <div class="event-actions">
                            <a href="${event.detailsUrl}" class="btn-action">
                                <i class="fas fa-eye"></i> Détails
                            </a>
                            ${event.editUrl ? `
                                <a href="${event.editUrl}" class="btn-action">
                                    <i class="fas fa-edit"></i> Modifier
                                </a>
                            ` : ''}
                            ${event.participateUrl ? `
                                <a href="${event.participateUrl}" class="btn-action">
                                    <i class="fas fa-user-plus"></i> Participer
                                </a>
                            ` : ''}
                        </div>
                    `;
                    
                    eventsContainer.appendChild(eventCard);
                });
            }
        }
        
        // Fonction pour récupérer les événements d'un jour spécifique
        function getEventsForDay(date) {
            return events.filter(event => {
                const eventDate = new Date(event.start);
                return isSameDay(eventDate, date);
            }).sort((a, b) => {
                return new Date(a.start) - new Date(b.start);
            });
        }
        
        // Fonction utilitaire pour vérifier si deux dates sont le même jour
        function isSameDay(date1, date2) {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        
        // Fonction pour formater une date au format ISO (YYYY-MM-DD)
        function formatDate(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }
        
        // Fonction pour formater une date en format français
        function formatDateFR(date) {
            const options = { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' };
            return date.toLocaleDateString('fr-FR', options);
        }
        
        // Fonction pour formater l'heure (HH:MM)
        function formatTime(date) {
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            return `${hours}:${minutes}`;
        }
        
        // Si on est déjà en vue calendrier, l'initialiser
        if (document.getElementById('calendar-view').classList.contains('active')) {
            renderCalendar();
            updateDayEvents(selectedDate);
        }
    });
</script>
{% endblock %}