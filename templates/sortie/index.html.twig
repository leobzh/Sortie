{% extends 'base.html.twig' %}
{% block stylesheets %}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link rel="stylesheet" href="{{ asset('styles/sortie.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
{% endblock %}

{% block title %}Liste des Sorties{% endblock %}

{% block body %}
    <div class="example-wrapper">
        <h1><i class="fas fa-calendar-alt"></i> Liste des Sorties</h1>

        <div class="actions-bar">
            <a href="{{ path('app_sortie_creation') }}" class="nav-link">
                <i class="fas fa-plus-circle"></i> Créer une sortie
            </a>

            <div class="view-toggle">
                <button class="toggle-btn active" data-view="table">
                    <i class="fas fa-table"></i> Tableau
                </button>
                <button class="toggle-btn" data-view="calendar">
                    <i class="fas fa-calendar-alt"></i> Calendrier
                </button>
            </div>
        </div>

        {# YG : Filtres #}
        <div>

            <fieldset class="mb-4">
                <legend class="fs-5 fw-bold mb-3">Filtres de recherches</legend>
                <form action="{{ path('app_sortie') }}" method="post">
                    <div class="row g-3">
                        <!-- Colonne gauche : Filtres actuels -->
                        <div class="col-md-6">
                            <div class="row g-3 align-items-end">
                                <!-- Filtre Site -->
                                <div class="col-12">
                                    <div class="form-group">
                                        <label for="site" class="form-label">Site :</label>
                                        <select name="site" id="site" class="form-select">
                                            <option value="" {% if selectedSiteId is not defined or selectedSiteId == '' %}selected{% endif %}>Tous les sites</option>
                                            {% for site in sites %}
                                                <option value="{{ site.id }}" {% if selectedSiteId is defined and selectedSiteId == site.id %}selected{% endif %}>
                                                    {{ site.nom }}
                                                </option>
                                            {% endfor %}
                                        </select>
                                    </div>
                                </div>

                                <!-- Filtre Nom -->
                                <div class="col-12">
                                    <div class="form-group">
                                        <label for="nom" class="form-label">Le nom de la sortie contient :</label>
                                        <input type="text" name="nom" id="nom" class="form-control w-75" placeholder="Nom ?" value="{{ nom ?? '' }}">
                                    </div>
                                </div>

                                <!-- Filtre Dates -->
                                <div class="col-12">
                                    <div class="form-group">
                                        <label class="form-label">Entre (date début) et (date limite) :</label>
                                        <div class="input-group">
                                            <input type="date" name="dateHeureDebut" id="dateHeureDebut" class="form-control" value="{{ dateHeureDebut ?? '' }}" placeholder="Date début">
                                            <span class="input-group-text">et</span>
                                            <input type="date" name="dateLimiteInscription" id="dateLimiteInscription" class="form-control" value="{{ dateLimiteInscription ?? '' }}" placeholder="Date limite">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Colonne droite : Futurs filtres (isOrganisateur, isInscrit, isNotInscrit) -->
                        <div class="col-md-6">
                            <div class="row g-3 align-items-end">
                                <!-- Filtre isOrganisateur -->
                                <div class="col-12">
                                    <div class="form-group">
                                        <label for="isOrganisateur" class="form-label">Mes sorties (organisateur)</label>
                                        <input type="checkbox" name="isOrganisateur" id="isOrganisateur" {{ isOrganisateur is defined and isOrganisateur ? 'checked' : '' }} />
                                    </div>
                                </div>

                                <!-- Filtre isInscrit -->
                                <div class="col-12">
                                    <div class="form-group">
                                        <label for="isInscrit" class="form-label">Mes sorties (participant)</label>
                                        <input type="checkbox" name="isInscrit" id="isInscrit" {{ isInscrit is defined and isInscrit ? 'checked' : '' }} />
                                    </div>
                                </div>

                                <!-- Filtre isNotInscrit -->
                                <div class="col-12">
                                    <div class="form-group">
                                        <label for="isNotInscrit" class="form-label">Sorties où je ne participe pas</label>
                                        <input type="checkbox" name="isNotInscrit" id="isNotInscrit" {{ isNotInscrit is defined and isNotInscrit ? 'checked' : '' }} />
                                    </div>
                                </div>

                                <!-- Filtre isEnded -->
                                <div class="col-12">
                                    <div class="form-group">
                                        <label for="isEnded" class="form-label">Sorties terminées</label>
                                        <input type="checkbox" name="isEnded" id="isEnded" {{ isEnded is defined and isEnded ? 'checked' : '' }} />
                                    </div>
                                </div>


                            </div>
                        </div>

                        <!-- Bouton Rechercher (placé en bas, centré sur mobile) -->
                        <div class="col-12">
                            <div class="text-end mt-3">
                                <button type="submit" class="btn btn-primary w-25">Rechercher</button>
                            </div>
                        </div>
                    </div>
                </form>
            </fieldset>


        </div>

        {# Table View #}
        <div id="table-view" class="view-container active">
            {% if sorties|length > 0 %}
                <table>
                    <thead>
                    <tr>
                        <th><i class="fas fa-tag"></i> Nom</th>
                        <th><i class="fas fa-clock"></i> Date de début</th>
                        <th><i class="fas fa-hourglass-half"></i> Durée</th>
                        <th><i class="fas fa-map-marker-alt"></i> Lieu</th>
                        <th><i class="fas fa-user"></i> Organisateur</th>
                        <th><i class="fas fa-users"></i> Participants</th>
                        <th><i class="fas fa-cog"></i> Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for sortie in sorties %}
                        <tr>
                            <td data-label="Nom">{{ sortie.nom }}</td>
                            <td data-label="Date de début">{{ sortie.dateHeureDebut|date('d/m/Y H:i') }}</td>
                            <td data-label="Durée">{{ sortie.duree }} min</td>
                            <td data-label="Lieu">{{ sortie.lieu.nom }}</td>
                            <td data-label="Organisateur">{{ sortie.organisateur.nom }}</td>
                            <td data-label="Participants">
                                <span class="badge {% if sortie.participants|length >= sortie.nbInscriptionsMax %}badge-full{% endif %}">
                                    {{ sortie.participants|length }} / {{ sortie.nbInscriptionsMax }}
                                </span>
                            </td>
                            <td data-label="Actions">
                                <a href="{{ path('app_sortie_details', {'id': sortie.id}) }}" class="btn-action">
                                    <i class="fas fa-eye"></i>
                                </a>
                                {% if app.user == sortie.organisateur %}
                                    <a href="{{ path('app_sortie_edit', {'id': sortie.id}) }}" class="btn-action">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                {% endif %}
                                {% if sortie.participants|length < sortie.nbInscriptionsMax and sortie.dateLimiteInscription > date() and app.user not in sortie.participants %}
                                    <a href="{{ path('app_sortie_participer', {'id': sortie.id}) }}" class="btn-action">
                                        <i class="fas fa-user-plus"></i>
                                    </a>
                                {% endif %}
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            {% else %}
                <div class="empty-state">
                    <i class="fas fa-calendar-times fa-3x"></i>
                    <p>Aucune sortie disponible.</p>
                    <a href="{{ path('app_sortie_creation') }}" class="nav-link">
                        <i class="fas fa-plus-circle"></i> Créer la première sortie
                    </a>
                </div>
            {% endif %}
        </div>

        {# Calendar View #}
        <div id="calendar-view" class="view-container">
            <div class="simple-calendar">
                <div class="calendar-header">
                    <div class="calendar-nav">
                        <button id="prev-month"><i class="fas fa-chevron-left"></i></button>
                    </div>
                    <div class="calendar-title" id="calendar-month">Février 2025</div>
                    <div class="calendar-nav">
                        <button id="next-month"><i class="fas fa-chevron-right"></i></button>
                    </div>
                </div>
                <div class="calendar-grid" id="calendar-days-header">
                    <div class="calendar-day-name">Lun</div>
                    <div class="calendar-day-name">Mar</div>
                    <div class="calendar-day-name">Mer</div>
                    <div class="calendar-day-name">Jeu</div>
                    <div class="calendar-day-name">Ven</div>
                    <div class="calendar-day-name">Sam</div>
                    <div class="calendar-day-name">Dim</div>
                </div>
                <div class="calendar-grid" id="calendar-days">
                    <!-- Jours du calendrier générés par JavaScript -->
                </div>
            </div>

            <div class="events-list" id="day-events">
                <h2 id="selected-date">Événements du jour</h2>
                <div id="events-container">
                    <!-- Les événements du jour sélectionné seront affichés ici -->
                    <div class="empty-events">
                        <i class="fas fa-calendar-day fa-3x"></i>
                        <p>Sélectionnez un jour pour voir les événements</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    {# Données des sorties en JSON pour le JavaScript #}
    <script type="application/json" id="events-data">
        [
        {% for sortie in sorties %}
    {
        "id": {{ sortie.id }},
        "title": {{ sortie.nom|json_encode|raw }},
        "start": "{{ sortie.dateHeureDebut|date('Y-m-d\\TH:i:s') }}",
        "end": "{{ sortie.dateHeureDebut|date_modify('+' ~ sortie.duree ~ ' minutes')|date('Y-m-d\\TH:i:s') }}",
        "lieu": {{ sortie.lieu.nom|json_encode|raw }},
        "organisateur": {{ sortie.organisateur.nom|json_encode|raw }},
        "participants": "{{ sortie.participants|length }} / {{ sortie.nbInscriptionsMax }}",
        "detailsUrl": "{{ path('app_sortie_details', {'id': sortie.id}) }}"
        {% if app.user == sortie.organisateur %}
        ,"editUrl": "{{ path('app_sortie_edit', {'id': sortie.id}) }}"
        {% endif %}
        {% if sortie.participants|length < sortie.nbInscriptionsMax and sortie.dateLimiteInscription > date() and app.user not in sortie.participants %}
        ,"participateUrl": "{{ path('app_sortie_participer', {'id': sortie.id}) }}"
        {% endif %}
    }{% if not loop.last %}{% endif %}
        {% endfor %}
        ]
    </script>
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Variables globales
            let currentDate = new Date();
            let selectedDate = new Date();
            let events = [];

            // Éléments DOM
            const toggleBtns = document.querySelectorAll('.toggle-btn');
            const viewContainers = document.querySelectorAll('.view-container');
            const prevMonthBtn = document.getElementById('prev-month');
            const nextMonthBtn = document.getElementById('next-month');
            const calendarMonthTitle = document.getElementById('calendar-month');
            const calendarDaysGrid = document.getElementById('calendar-days');
            const selectedDateTitle = document.getElementById('selected-date');
            const eventsContainer = document.getElementById('events-container');

            // Noms des mois en français
            const monthNames = [
                'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',
                'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'
            ];

            // Chargement des événements
            try {
                const eventsData = document.getElementById('events-data');
                if (eventsData) {
                    events = JSON.parse(eventsData.textContent);
                }
            } catch (e) {
                console.error('Erreur lors du chargement des événements:', e);
                events = [];
            }

            // Gestionnaire de bascule entre les vues
            toggleBtns.forEach(btn => {
                btn.addEventListener('click', function () {
                    const targetView = this.getAttribute('data-view');

                    // Mettre à jour les boutons
                    toggleBtns.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');

                    // Mettre à jour les vues
                    viewContainers.forEach(vc => vc.classList.remove('active'));
                    document.getElementById(`${targetView}-view`).classList.add('active');

                    // Si on passe à la vue calendrier, initialiser le calendrier
                    if (targetView === 'calendar') {
                        renderCalendar();
                        updateDayEvents(selectedDate);
                    }
                });
            });

            // Gestionnaires de navigation dans le calendrier
            prevMonthBtn.addEventListener('click', function () {
                currentDate.setMonth(currentDate.getMonth() - 1);
                renderCalendar();
            });

            nextMonthBtn.addEventListener('click', function () {
                currentDate.setMonth(currentDate.getMonth() + 1);
                renderCalendar();
            });

            // Fonction pour rendre le calendrier
            function renderCalendar() {
                // Mettre à jour le titre du mois
                calendarMonthTitle.textContent = `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`;

                // Vider la grille du calendrier
                calendarDaysGrid.innerHTML = '';

                // Créer un nouvel objet Date pour éviter de modifier currentDate
                const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);

                // Trouver le premier jour du mois
                let firstDay = date.getDay();
                firstDay = firstDay === 0 ? 6 : firstDay - 1; // Ajustement pour commencer par lundi (0)

                // Reculer jusqu'au lundi précédant le premier jour du mois
                date.setDate(date.getDate() - firstDay);

                // Créer 6 semaines (42 jours) pour couvrir tout le mois
                for (let i = 0; i < 42; i++) {
                    const dayDate = new Date(date);
                    const isCurrentMonth = dayDate.getMonth() === currentDate.getMonth();
                    const isToday = isSameDay(dayDate, new Date());

                    // Créer la cellule du jour
                    const dayCell = document.createElement('div');
                    dayCell.className = `calendar-day${isCurrentMonth ? '' : ' other-month'}${isToday ? ' today' : ''}`;
                    dayCell.dataset.date = formatDate(dayDate);

                    // Ajouter le numéro du jour
                    const dayNumber = document.createElement('div');
                    dayNumber.className = 'day-number';
                    dayNumber.textContent = dayDate.getDate();
                    dayCell.appendChild(dayNumber);

                    // Ajouter les événements du jour
                    const dayEvents = document.createElement('div');
                    dayEvents.className = 'calendar-events';

                    // Filtrer les événements pour cette journée
                    const eventsForDay = getEventsForDay(dayDate);

                    // Ajouter un maximum de 3 événements
                    const maxDisplay = 2;
                    const displayEvents = eventsForDay.slice(0, maxDisplay);

                    displayEvents.forEach(event => {
                        const eventElement = document.createElement('div');
                        eventElement.className = 'calendar-event';
                        // Only show the time and a shortened version of the title
                        const shortTitle = event.title.length > 15 ?
                            event.title.substring(0, 15) + '...' :
                            event.title;
                        eventElement.textContent = formatTime(new Date(event.start)) + ' ' + shortTitle;
                        eventElement.title = `${event.title} - ${event.lieu} - ${event.organisateur}`; // Full info on hover
                        dayEvents.appendChild(eventElement);
                    });

                    // Indiquer s'il y a plus d'événements
                    if (eventsForDay.length > maxDisplay) {
                        const moreEvents = document.createElement('div');
                        moreEvents.className = 'calendar-view-all';
                        moreEvents.textContent = `+${eventsForDay.length - maxDisplay} autres`;
                        dayEvents.appendChild(moreEvents);
                    }

                    dayCell.appendChild(dayEvents);

                    // Ajouter un gestionnaire d'événement au clic
                    dayCell.addEventListener('click', function () {
                        // Mettre à jour la date sélectionnée
                        selectedDate = new Date(this.dataset.date);

                        // Mettre à jour la classe active
                        document.querySelectorAll('.calendar-day').forEach(cell => {
                            cell.classList.remove('selected');
                        });
                        this.classList.add('selected');

                        // Mettre à jour les événements du jour
                        updateDayEvents(selectedDate);
                    });

                    // Ajouter la cellule à la grille
                    calendarDaysGrid.appendChild(dayCell);

                    // Passer au jour suivant
                    date.setDate(date.getDate() + 1);
                }
            }

            // Fonction pour mettre à jour la liste des événements du jour sélectionné
            function updateDayEvents(date) {
                // Mettre à jour le titre
                selectedDateTitle.textContent = `Événements du ${formatDateFR(date)}`;

                // Récupérer les événements du jour
                const dayEvents = getEventsForDay(date);

                // Vider le conteneur
                eventsContainer.innerHTML = '';

                // Afficher les événements ou un message si aucun
                if (dayEvents.length === 0) {
                    const emptyMessage = document.createElement('div');
                    emptyMessage.className = 'empty-events';
                    emptyMessage.innerHTML = `
                    <i class="fas fa-calendar-day fa-3x"></i>
                    <p>Aucun événement pour cette journée</p>
                `;
                    eventsContainer.appendChild(emptyMessage);
                } else {
                    dayEvents.forEach(event => {
                        const eventCard = document.createElement('div');
                        eventCard.className = 'event-card';

                        // Formater l'heure de début et de fin
                        const startTime = formatTime(new Date(event.start));
                        const endTime = formatTime(new Date(event.end));

                        // Créer le contenu de la carte
                        eventCard.innerHTML = `
                        <div class="event-title">${event.title}</div>
                        <div class="event-info">
                            <div><i class="fas fa-clock"></i> ${startTime} - ${endTime}</div>
                            <div><i class="fas fa-map-marker-alt"></i> ${event.lieu}</div>
                            <div><i class="fas fa-user"></i> ${event.organisateur}</div>
                            <div><i class="fas fa-users"></i> ${event.participants}</div>
                        </div>
                        <div class="event-actions">
                            <a href="${event.detailsUrl}" class="btn-action">
                                <i class="fas fa-eye"></i> Détails
                            </a>
                            ${event.editUrl ? `
                                <a href="${event.editUrl}" class="btn-action">
                                    <i class="fas fa-edit"></i> Modifier
                                </a>
                            ` : ''}
                            ${event.participateUrl ? `
                                <a href="${event.participateUrl}" class="btn-action">
                                    <i class="fas fa-user-plus"></i> Participer
                                </a>
                            ` : ''}
                        </div>
                    `;

                        eventsContainer.appendChild(eventCard);
                    });
                }
            }

            // Fonction pour récupérer les événements d'un jour spécifique
            function getEventsForDay(date) {
                return events.filter(event => {
                    const eventDate = new Date(event.start);
                    return isSameDay(eventDate, date);
                }).sort((a, b) => {
                    return new Date(a.start) - new Date(b.start);
                });
            }

            // Fonction utilitaire pour vérifier si deux dates sont le même jour
            function isSameDay(date1, date2) {
                return date1.getFullYear() === date2.getFullYear() &&
                    date1.getMonth() === date2.getMonth() &&
                    date1.getDate() === date2.getDate();
            }

            // Fonction pour formater une date au format ISO (YYYY-MM-DD)
            function formatDate(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }

            // Fonction pour formater une date en format français
            function formatDateFR(date) {
                const options = {weekday: 'long', day: 'numeric', month: 'long', year: 'numeric'};
                return date.toLocaleDateString('fr-FR', options);
            }

            // Fonction pour formater l'heure (HH:MM)
            function formatTime(date) {
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                return `${hours}:${minutes}`;
            }

            // Si on est déjà en vue calendrier, l'initialiser
            if (document.getElementById('calendar-view').classList.contains('active')) {
                renderCalendar();
                updateDayEvents(selectedDate);
            }
        });
    </script>
{% endblock %}